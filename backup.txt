# def homogeneous_simulation( fluid, line, temp) -> tuple:

#     step = 0.1
#     i = 0
#     vls_old = 0
#     vars = [[],[],[],[],[],[],[],[],[]]
#     fluid_simulation = copy(fluid)

#     while round(i,3) != line.L:

#         fluid_simulation.T_pr = ( fluid_simulation.T*(9/5) + 491.67 ) / fluid.T_pc # rankine / rankine
#         fluid_simulation.P_pr = (fluid_simulation.P*14.503773800722)/fluid.P_pc #psia/psia

#         if temp != None:

#             if (line.angle/(np.pi / 180)) == 90 or 0:
#                 H = line.L - round(i,3)
#             else:
#                 H = round((line.L - round(i,3))*np.sin(line.angle),3)

#             mix_velocity, liquid_velocity, gas_velocity, mix_rho, liquid_rho, gas_rho, mix_viscosity, liquid_viscosity, gasviscosity, waterviscosity, sigma_gl, fwc, λl,z_fluid, liquid_cp, flow_liquid_mass, flow_oil_mass , flow_gas_mass = flow_infos(fluid_simulation,line)
            
#             flow_info = Flow_info(

#                 Vsl = liquid_velocity,
#                 Liquid_rho = liquid_rho,
#                 Liquid_viscosity = liquid_viscosity,
#                 Gas_liquid_sigma = sigma_gl,
#                 Vsg = gas_velocity,
#                 Gas_rho = gas_rho ,
#                 Gas_viscosity = gasviscosity ,
#                 Vm = mix_velocity ,
#                 Mix_rho = mix_rho ,
#                 Mix_viscosity = mix_viscosity ,
#                 Pressure = fluid_simulation.P*100000,
#                 Z = z_fluid,
#                 flow_liquid_mass = flow_liquid_mass,
#                 flow_oil_mass = flow_oil_mass,
#                 flow_gas_mass = flow_gas_mass,
#                 MM = fluid_simulation.Ma,
#                 Temperature = fluid_simulation.T,
#                 )
        
#             t_inf = (round((temp.a*H) + temp.T1,2))
#             mass_flow = flow_liquid_mass*λl + flow_gas_mass*( 1 - λl)
#             cp_mix = ( ( liquid_cp* λl ) + cp_gas(fluid_simulation)*( 1 - λl) )*1000
#             term1_temp =  (mass_flow*9.81*np.sin(line.angle) ) / (temp.TEC)
#             term2_temp = np.exp( ( (-temp.TEC) / (mass_flow*cp_mix)* (step) ))
#             term3_temp = ( (t_inf) - ( term1_temp) - (fluid_simulation.T) )
#             fluid_simulation.T = ( t_inf - term1_temp - (term2_temp*term3_temp) )


#         presure_fluid = fluid_simulation.P*100000
#         old_pressure = presure_fluid


#         if i == 0:
#             dif = 0
#         else:
#             dif = abs(mix_velocity - vls_old)

#         A =  total_gradient(flow_info,line)*step
#         B = (mix_rho*mix_velocity*(dif))*step
#         lose_pressure = presure_fluid - A - B
#         fluid_simulation.P = lose_pressure/100000
#         vars[0].append(fluid_simulation.P)
#         vars[1].append(fluid_simulation.T)
#         vars[2].append(flow_info.λl)
#         vars[3].append(flow_info.vm)
#         vars[4].append(flow_info.vsg)
#         vars[5].append(flow_info.vsl)
#         vars[6].append(flow_info.mix_rho)
#         vars[7].append(flow_info.mix_viscosity)
#         vars[8].append(flow_info.z)


#         print(fluid_simulation.P,λl,fluid_simulation.T)
 
#         if fluid_simulation.P < 0 :
#             fluid_simulation.P = 0
#             break
#         if old_pressure < lose_pressure:
#             fluid_simulation.P = 0
#             break
#         if np.isnan(fluid_simulation.P ) == True:
#             fluid_simulation.P = 0

#         vls_old = mix_velocity
#         i+= step

#     return (fluid_simulation.T,fluid_simulation.P,vars)

# def briggs_simulation( fluid, line, temp)  -> tuple:

#     fluid_simulation = copy(fluid)
#     step = 0.1
#     i = 0
#     var = []

#     while round(i,3) != line.L:
        
#         fluid_simulation.T_pr = ( fluid_simulation.T*(9/5) + 491.67 ) / fluid.T_pc # rankine / rankine
#         fluid_simulation.P_pr = (fluid_simulation.P*14.503773800722)/fluid.P_pc #psia/psia

#         if temp != None:

#             if (line.angle/(np.pi / 180)) == 90 or 0:
#                 H = line.L - round(i,3)
#             else:
#                 H = (line.L - round(i,3))*np.sin(line.angle)

            
#             t_inf = (round((temp.a*H) + temp.T1,3))
            
#             mix_velocity, liquid_velocity, gas_velocity, mix_rho, liquid_rho, gas_rho, mix_viscosity, liquid_viscosity, gasviscosity, waterviscosity, sigma_gl, fwc, λl,z_fluid,liquid_cp, flow_liquid_mass, flow_oil_mass , flow_gas_mass = flow_infos(fluid_simulation,line)
            
            

#             flow_info = Flow_info(

#                 Vsl = liquid_velocity,
#                 Liquid_rho = liquid_rho,
#                 Liquid_viscosity = liquid_viscosity,
#                 Gas_liquid_sigma = sigma_gl,
#                 Vsg = gas_velocity,
#                 Gas_rho = gas_rho ,
#                 Gas_viscosity = gasviscosity ,
#                 Vm = mix_velocity ,
#                 Mix_rho = mix_rho ,
#                 Mix_viscosity = mix_viscosity ,
#                 Pressure = fluid_simulation.P,
#                 Z = z_fluid,
#                 flow_liquid_mass = flow_liquid_mass,
#                 flow_oil_mass = flow_oil_mass,
#                 flow_gas_mass = flow_gas_mass,
#                 MM = fluid_simulation.Ma,
#                 Temperature = fluid_simulation.T,
#                 )
            
#             if fluid_simulation.P > (Pb_standing(fluid)/14.504):
#                 mix_velocity, liquid_velocity, gas_velocity, mix_rho, liquid_rho, gas_rho, mix_viscosity, liquid_viscosity, gasviscosity, waterviscosity, sigma_gl, fwc, λl,z_fluid,liquid_cp, flow_liquid_mass, flow_oil_mass , flow_gas_mass = flow_infos(fluid_simulation,line)
#                 mass_flow = flow_liquid_mass*λl + flow_gas_mass*( 1 - λl)
#                 cp_mix = ( ( liquid_cp* λl ) + cp_gas(fluid_simulation)*( 1 - λl) )*1000
#                 term1_temp =  (mass_flow*9.81*np.sin(line.angle) ) / (temp.TEC)
#                 term2_temp = np.exp( ( (-temp.TEC) / (mass_flow*cp_mix)* (step) ))
#                 term3_temp = ( (t_inf) - ( term1_temp) - (fluid_simulation.T) )

#                 fluid_simulation.T = ( t_inf - term1_temp - (term2_temp*term3_temp) )
#                 Hl  = λl

#                 presure_fluid = fluid_simulation.P*100000
#                 lose_pressure = presure_fluid - total_gradient(flow_info,line)*step
#                 fluid_simulation.P = lose_pressure/100000
#                 var.append(fluid_simulation.P)

#             elif fluid_simulation.P < (Pb_standing(fluid)/14.504):
#                 if horizontal_liquid_holdup(flow_info,line) < λl:
#                     raise ('Hlo < λl')
#                 Hl = liquid_Holdup(flow_info,line)
#                 mass_flow = flow_liquid_mass*Hl + flow_gas_mass*( 1 - Hl)
#                 cp_mix = ( ( liquid_cp* Hl ) + cp_gas(fluid_simulation)*( 1 - Hl) )*1000
#                 term1_temp =  (mass_flow*9.81*np.sin(line.angle) ) / (temp.TEC)
#                 term2_temp = np.exp( ( (-temp.TEC) / (mass_flow*cp_mix)* (step) ))
#                 term3_temp = ( (t_inf) - ( term1_temp) - (fluid_simulation.T) )

#                 fluid_simulation.T = ( t_inf - term1_temp - (term2_temp*term3_temp) )
        
#                 presure_fluid = fluid_simulation.P*100000
#                 lose_pressure = presure_fluid - total_gradient_briggs(flow_info,line)*step
#                 fluid_simulation.P = lose_pressure/100000
#                 var.append(fluid_simulation.P)
         
        
#         print(fluid_simulation.P,Hl,fluid_simulation.T)
#         if fluid_simulation.P < 1 :
#             fluid_simulation.P = 0
#             break
        
#         if np.isnan(fluid_simulation.P) == True:
#             fluid_simulation.P = 0
#             break


#         i+= step

#     return (fluid_simulation.T,fluid_simulation.P,var)

# def HB_simulation( fluid, line, temp,) -> tuple:
    

#     fluid_simulation = copy(fluid)
#     step = 0.1
#     i = 0
#     vars = [[],[],[],[],[],[],[],[],[]]

#     vel = 0

#     while round(i,3) != line.L:

#         fluid_simulation.T_pr = ( fluid_simulation.T*(9/5) + 491.67 ) / fluid.T_pc # rankine / rankine
#         fluid_simulation.P_pr = (fluid_simulation.P*14.503773800722)/fluid.P_pc #psia/psia

#         if temp != None:

#             if (line.angle/(np.pi / 180)) == 90 or 0:
#                 H = line.L - round(i,3)
#             else:
#                 H = (line.L - round(i,3))*np.sin(line.angle)

            
#             t_inf = (round((temp.a*H) + temp.T1,3))
            
#             mix_velocity, liquid_velocity, gas_velocity, mix_rho, liquid_rho, gas_rho, mix_viscosity, liquid_viscosity, gasviscosity, waterviscosity, sigma_gl, fwc, λl,z_fluid,liquid_cp, flow_liquid_mass, flow_oil_mass , flow_gas_mass = flow_infos(fluid_simulation,line)
            
            

#             flow_info = Flow_info(

#                 Vsl = liquid_velocity,
#                 Liquid_rho = liquid_rho,
#                 Liquid_viscosity = liquid_viscosity,
#                 Gas_liquid_sigma = sigma_gl,
#                 Vsg = gas_velocity,
#                 Gas_rho = gas_rho ,
#                 Gas_viscosity = gasviscosity ,
#                 Vm = mix_velocity ,
#                 Mix_rho = mix_rho ,
#                 Mix_viscosity = mix_viscosity ,
#                 Pressure = fluid_simulation.P,
#                 Z = z_fluid,
#                 flow_liquid_mass = flow_liquid_mass,
#                 flow_oil_mass = flow_oil_mass,
#                 flow_gas_mass = flow_gas_mass,
#                 MM = fluid_simulation.Ma,
#                 Temperature = fluid_simulation.T,
#                 )
            
#             if fluid_simulation.P > (Pb_standing(fluid)/14.504):
#                 mix_velocity, liquid_velocity, gas_velocity, mix_rho, liquid_rho, gas_rho, mix_viscosity, liquid_viscosity, gasviscosity, waterviscosity, sigma_gl, fwc, λl,z_fluid,liquid_cp, flow_liquid_mass, flow_oil_mass , flow_gas_mass = flow_infos(fluid_simulation,line)
#                 mass_flow = flow_liquid_mass*λl + flow_gas_mass*( 1 - λl)
#                 cp_mix = ( ( liquid_cp* λl ) + cp_gas(fluid_simulation)*( 1 - λl) )*1000
#                 term1_temp =  (mass_flow*9.81*np.sin(line.angle) ) / (temp.TEC)
#                 term2_temp = np.exp( ( (-temp.TEC) / (mass_flow*cp_mix)* (step) ))
#                 term3_temp = ( (t_inf) - ( term1_temp) - (fluid_simulation.T) )

#                 fluid_simulation.T = ( t_inf - term1_temp - (term2_temp*term3_temp) )
#                 Hl  = λl


#                 presure_fluid = fluid_simulation.P*100000
#                 lose_pressure = presure_fluid - total_gradient(flow_info,line)*step
#                 fluid_simulation.P = lose_pressure/100000
#                 vars[0].append(fluid_simulation.P)
#                 vars[1].append(fluid_simulation.T)
#                 vars[2].append(Hl)
#                 vars[3].append(flow_info.vm)
#                 vars[4].append(flow_info.vsg)
#                 vars[5].append(flow_info.vsl)
#                 vars[6].append(flow_info.mix_rho)
#                 vars[7].append(flow_info.mix_viscosity)
#                 vars[8].append(flow_info.z)

#             else:
#                 Hl  = HL_HB(flow_info,line)
#                 mass_flow = flow_liquid_mass*Hl + flow_gas_mass*( 1 - Hl)
#                 cp_mix = ( ( liquid_cp* Hl ) + cp_gas(fluid_simulation)*( 1 - Hl) )*1000
#                 term1_temp =  (mass_flow*9.81*np.sin(line.angle) ) / (temp.TEC)
#                 term2_temp = np.exp( ( (-temp.TEC) / (mass_flow*cp_mix)* (step) ))
#                 term3_temp = ( (t_inf) - ( term1_temp) - (fluid_simulation.T) )

#                 fluid_simulation.T = ( t_inf - term1_temp - (term2_temp*term3_temp) )
                
#                 # if i == 0:
#                 #     kinectic_Hb = 0
#                 # else:
#                 #     dif = ((mix_velocity**2 - vel**2))
#                 #     kinectic_Hb  = (mix_slip_density(flow_info,line)*dif)*step

#                 presure_fluid = fluid_simulation.P*100000
#                 lose_pressure = presure_fluid - (gravitational_gradient_HB(flow_info,line)+friction_gradient_HB(flow_info,line))*step  #- kinectic_Hb
#                 fluid_simulation.P = lose_pressure/100000
#                 vars[0].append(fluid_simulation.P)
#                 vars[1].append(fluid_simulation.T)
#                 vars[2].append(Hl)
#                 vars[3].append(flow_info.vm)
#                 vars[4].append(flow_info.vsg)
#                 vars[5].append(flow_info.vsl)
#                 vars[6].append(flow_info.mix_rho)
#                 vars[7].append(flow_info.mix_viscosity)
#                 vars[8].append(flow_info.z)

#         old_pressure = presure_fluid
        
#         if fluid_simulation.P < 0 :
#             fluid_simulation.P = 0
#             break
#         if old_pressure < lose_pressure:
#             fluid_simulation.P = 0
#             break

#         print(fluid_simulation.P,Hl,fluid_simulation.T)

#         i+= step

#     return (fluid_simulation.T,fluid_simulation.P,vars)


def bendisken_simulation( fluid, line, temp, ) -> tuple:
    

    fluid_simulation = copy(fluid)
    step = 0.1
    i = 0
    vars = [[],[],[],[],[],[],[],[],[]]

    while round(i,3) != line.L:

        fluid_simulation.T_pr = ( fluid_simulation.T*(9/5) + 491.67 ) / fluid.T_pc # rankine / rankine
        fluid_simulation.P_pr = (fluid_simulation.P*14.503773800722)/fluid.P_pc #psia/psia


        if temp != None:

            if (line.angle/(np.pi / 180)) == 90 or 0:
                H = line.L - round(i,3)
            else:
                H = (line.L - round(i,3))*np.sin(line.angle)

            
            t_inf = (round((temp.a*H) + temp.T1,3))
            
            mix_velocity, liquid_velocity, gas_velocity, mix_rho, liquid_rho, gas_rho, mix_viscosity, liquid_viscosity, gasviscosity, waterviscosity, sigma_gl, fwc, λl,z_fluid,liquid_cp, flow_liquid_mass, flow_oil_mass , flow_gas_mass = flow_infos(fluid_simulation,line)
            
            

            flow_info = Flow_info(

                Vsl = liquid_velocity,
                Liquid_rho = liquid_rho,
                Liquid_viscosity = liquid_viscosity,
                Gas_liquid_sigma = sigma_gl,
                Vsg = gas_velocity,
                Gas_rho = gas_rho ,
                Gas_viscosity = gasviscosity ,
                Vm = mix_velocity ,
                Mix_rho = mix_rho ,
                Mix_viscosity = mix_viscosity ,
                Pressure = fluid_simulation.P,
                Z = z_fluid,
                flow_liquid_mass = flow_liquid_mass,
                flow_oil_mass = flow_oil_mass,
                flow_gas_mass = flow_gas_mass,
                MM = fluid_simulation.Ma,
                Temperature = fluid_simulation.T,
                )
            

            if fluid_simulation.P > (Pb_standing(fluid)/14.504):
                mix_velocity, liquid_velocity, gas_velocity, mix_rho, liquid_rho, gas_rho, mix_viscosity, liquid_viscosity, gasviscosity, waterviscosity, sigma_gl, fwc, λl,z_fluid,liquid_cp, flow_liquid_mass, flow_oil_mass , flow_gas_mass = flow_infos(fluid_simulation,line)
                mass_flow = flow_liquid_mass*λl + flow_gas_mass*( 1 - λl)
                cp_mix = ( ( liquid_cp* λl ) + cp_gas(fluid_simulation)*( 1 - λl) )*1000
                term1_temp =  (mass_flow*9.81*np.sin(line.angle) ) / (temp.TEC)
                term2_temp = np.exp( ( (-temp.TEC) / (mass_flow*cp_mix)* (step) ))
                term3_temp = ( (t_inf) - ( term1_temp) - (fluid_simulation.T) )

                fluid_simulation.T = ( t_inf - term1_temp - (term2_temp*term3_temp) )
                Hl  = λl

                presure_fluid = fluid_simulation.P*100000
                lose_pressure = presure_fluid - total_gradient(flow_info,line)*step
                fluid_simulation.P = lose_pressure/100000
                vars[0].append(fluid_simulation.P)
                vars[1].append(fluid_simulation.T)
                vars[2].append(Hl)
                vars[3].append(flow_info.vm)
                vars[4].append(flow_info.vsg)
                vars[5].append(flow_info.vsl)
                vars[6].append(flow_info.mix_rho)
                vars[7].append(flow_info.mix_viscosity)
                vars[8].append(flow_info.z)



            else:

                vsg,vsl,vm,Hl,mix_rho,mix_viscosity,C0,vd = drift_infos(flow_info,line)

                if Hl < 0 :
                    raise('erro')

            
                mass_flow = flow_liquid_mass*Hl + flow_gas_mass*( 1 - Hl)
                cp_mix = ( ( liquid_cp* Hl ) + cp_gas(fluid_simulation)*( 1 - Hl) )*1000
                term1_temp =  (mass_flow*9.81*np.sin(line.angle) ) / (temp.TEC)
                term2_temp = np.exp( ( (-temp.TEC) / (mass_flow*cp_mix)* (step) ))
                term3_temp = ( (t_inf) - ( term1_temp) - (fluid_simulation.T) )

                fluid_simulation.T = ( t_inf - term1_temp - (term2_temp*term3_temp) )

                presure_fluid = fluid_simulation.P*100000
                lose_pressure = presure_fluid - (totaL_gradient_bendi(flow_info,line))*step 
                fluid_simulation.P = lose_pressure/100000
                vars[0].append(fluid_simulation.P)
                vars[1].append(fluid_simulation.T)
                vars[2].append(Hl)
                vars[3].append(vm)
                vars[4].append(vsg)
                vars[5].append(vsl)
                vars[6].append(mix_rho)
                vars[7].append(mix_viscosity)
                vars[8].append(flow_info.z)

        print(fluid_simulation.P,Hl,fluid_simulation.T)

        if fluid_simulation.P < 0 :
            fluid_simulation.P = 0
            break
        
        if np.isnan(fluid_simulation.P) == True:
            fluid_simulation.P = 0
            break


        i+= step


    return (fluid_simulation.T,fluid_simulation.P,vars)

def bhagwat_simulation( fluid, line, temp,) -> tuple:
    

    fluid_simulation = copy(fluid)
    step = 0.1
    i = 0
    var = []

    while round(i,3) != line.L:
                
        fluid_simulation.T_pr = ( fluid_simulation.T*(9/5) + 491.67 ) / fluid.T_pc # rankine / rankine
        fluid_simulation.P_pr = (fluid_simulation.P*14.503773800722)/fluid.P_pc #psia/psia


        if temp != None:

            if (line.angle/(np.pi / 180)) == 90 or 0:
                H = line.L - round(i,3)
            else:
                H = (line.L - round(i,3))*np.sin(line.angle)

            
            t_inf = (round((temp.a*H) + temp.T1,3))
            
            mix_velocity, liquid_velocity, gas_velocity, mix_rho, liquid_rho, gas_rho, mix_viscosity, liquid_viscosity, gasviscosity, waterviscosity, sigma_gl, fwc, λl,z_fluid,liquid_cp, flow_liquid_mass, flow_oil_mass , flow_gas_mass = flow_infos(fluid_simulation,line)
            
            

            flow_info = Flow_info(

                Vsl = liquid_velocity,
                Liquid_rho = liquid_rho,
                Liquid_viscosity = liquid_viscosity,
                Gas_liquid_sigma = sigma_gl,
                Vsg = gas_velocity,
                Gas_rho = gas_rho ,
                Gas_viscosity = gasviscosity ,
                Vm = mix_velocity ,
                Mix_rho = mix_rho ,
                Mix_viscosity = mix_viscosity ,
                Pressure = fluid_simulation.P,
                Z = z_fluid,
                flow_liquid_mass = flow_liquid_mass,
                flow_oil_mass = flow_oil_mass,
                flow_gas_mass = flow_gas_mass,
                MM = fluid_simulation.Ma,
                Temperature = fluid_simulation.T,
                )
            
            if fluid_simulation.P > (Pb_standing(fluid)/14.504):
                t_inf = (round((temp.a*H) + temp.T1,2))
                mix_velocity, liquid_velocity, gas_velocity, mix_rho, liquid_rho, gas_rho, mix_viscosity, liquid_viscosity, gasviscosity, waterviscosity, sigma_gl, fwc, λl,z_fluid,liquid_cp, flow_liquid_mass, flow_oil_mass , flow_gas_mass = flow_infos(fluid_simulation,line)
                mass_flow = flow_liquid_mass*λl + flow_gas_mass*( 1 - λl)
                cp_mix = ( ( liquid_cp* λl ) + cp_gas(fluid_simulation)*( 1 - λl) )*1000
                term1_temp =  (mass_flow*9.81*np.sin(line.angle) ) / (temp.TEC)
                term2_temp = np.exp( ( (-temp.TEC) / (mass_flow*cp_mix)* (step) ))
                term3_temp = ( (t_inf) - ( term1_temp) - (fluid_simulation.T) )

                fluid_simulation.T = ( t_inf - term1_temp - (term2_temp*term3_temp) )
                Hl  = λl

                presure_fluid = fluid_simulation.P*100000
                lose_pressure = presure_fluid - total_gradient(flow_info,line)*step
                fluid_simulation.P = lose_pressure/100000
                var.append(fluid_simulation.P)


            else:

                Hl  = drift_infos(flow_info,line)[3]

                if Hl < 0 :
                    Hl = 0e-12
                    raise('erro')

                mass_flow = flow_liquid_mass*Hl + flow_gas_mass*( 1 - Hl)
                cp_mix = ( ( liquid_cp* Hl ) + cp_gas(fluid_simulation)*( 1 - Hl) )*1000
                term1_temp =  (mass_flow*9.81*np.sin(line.angle) ) / (temp.TEC)
                term2_temp = np.exp( ( (-temp.TEC) / (mass_flow*cp_mix)* (step) ))
                term3_temp = ( (t_inf) - ( term1_temp) - (fluid_simulation.T) )

                fluid_simulation.T = ( t_inf - term1_temp - (term2_temp*term3_temp) )

                presure_fluid = fluid_simulation.P*100000
                lose_pressure = presure_fluid - (totaL_gradient_bhagwat(flow_info,line))*step 
                fluid_simulation.P = lose_pressure/100000
                var.append(fluid_simulation.P)

                    
        print(fluid_simulation.P,Hl,fluid_simulation.T)

        if fluid_simulation.P < 0 :
            fluid_simulation.P = 0
            break
        
        if np.isnan(fluid_simulation.P) == True:
            fluid_simulation.P = 0
            break


        i+= step


    return (fluid_simulation.T,fluid_simulation.P,var)