import numpy as np
from scipy.optimize import fsolve

g = 9.81


def liquid_velocity_number( Flow_info ) -> float:
    return ( (Flow_info.vsl)*( ( (Flow_info.liquid_rho) / (g *Flow_info.gas_liquid_sigma) )**(1/4)))

def gas_velocity_number( Flow_info) -> float:
    return ( (Flow_info.vsg)*( ( (Flow_info.liquid_rho) / (g *Flow_info.gas_liquid_sigma) )**(1/4)))

def diameter_tubing_number( Flow_info , tubing ) -> float:
    return ( (tubing.Dh)*( ( (Flow_info.liquid_rho*g) / (Flow_info.gas_liquid_sigma) )**(1/2)))

def liquid_viscosity_number( Flow_info  ) -> float:
    return ( (Flow_info.liquid_viscosity)*( ( (g) / ((Flow_info.liquid_rho)*(Flow_info.gas_liquid_sigma**3)))**(1/4)))

def psi( Flow_info, tubing  ) -> float:
    x = (gas_velocity_number(Flow_info)*liquid_viscosity_number(Flow_info)**0.380) / (diameter_tubing_number(Flow_info,tubing))**2.14
    if x < 0.012:
        Psi = 1
    elif x > 0.09:
        Psi = 1.82
    else:
        Psi = (((2*10**8)*(x**6)) - ((5*10**7)*(x**5)) + ((7*10**6)*(x**4)) - ((504474)*(x**3)) + ((17852)*(x**2)) - ((277.15)*(x)) + (2.5222))

    return Psi

def nlc( Flow_info) -> float:
    x = liquid_viscosity_number(Flow_info)
    if x < (0.002):
        nlc = 0.002065
    elif x > (0.5):
        nlc = 0.0113
    else:
        nlc = 0.0404 * x**3 - 0.0895 * x**2 + 0.0532 * x + 0.0018
    return nlc

def HL_HB( Flow_info, tubing ) -> float:
    
    x_test = (
        ((liquid_velocity_number(Flow_info))/(gas_velocity_number(Flow_info))**0.575)*
         (((Flow_info.pressure*0.0001450377)/(14.7))**0.10)*
         ((nlc(Flow_info))/(diameter_tubing_number(Flow_info,tubing)))
        )
    
    y_pred = 0
    if (x_test < 1.94944326454383E-06):

        y_pred = 0.049019607843137

    elif (x_test >= 1.91916618439363E-06) and (x_test <= 0.000009999999999):

        x = np.array([
            0.000001949443265, 0.000002037359592, 0.000002129240786, 0.000002258226818,
            0.000002395026620, 0.000002577738304, 0.000002733893606, 0.000002857187210,
            0.000002986041130, 0.000003120706127, 0.000003213840103, 0.000003261444268,
            0.000003358778417, 0.000003459017394, 0.000003562247890, 0.000003668559185,
            0.000003778043222, 0.000003890794687, 0.000004006911093, 0.000004126492863,
            0.000004249643417, 0.000004376469261, 0.000004573840025, 0.000004710341154,
            0.000004850916005, 0.000004922768929, 0.000005069683450, 0.000005220982470,
            0.000005376796839, 0.000005537261314, 0.000005619280548, 0.000005702514671,
            0.000005786981677, 0.000005959687658, 0.000006137547856, 0.000006320716092,
            0.000006509350778, 0.000006703615056, 0.000006903676933, 0.000007109709432,
            0.000007321890741, 0.000007540404363, 0.000007765439278, 0.000007997190109,
            0.000008235857283, 0.000008481647212, 0.000008864153997, 0.000009128694737,
            0.000009999999999
        ])

        y = np.array([
            0.049019608, 0.051470588, 0.051470588, 0.051470588, 0.053921569,
            0.056372549, 0.058823529, 0.06127451, 0.06372549, 0.066176471,
            0.068627451, 0.068627451, 0.071078431, 0.073529412, 0.073529412,
            0.075980392, 0.075980392, 0.078431373, 0.078431373, 0.080882353,
            0.083333333, 0.085784314, 0.088235294, 0.090686275, 0.093137255,
            0.093137255, 0.093137255, 0.095588235, 0.098039216, 0.100490196,
            0.100490196, 0.100490196, 0.102941176, 0.105392157, 0.107843137,
            0.110294118, 0.112745098, 0.115196078, 0.117647059, 0.117647059,
            0.120098039, 0.12254902, 0.125, 0.12745098, 0.129901961,
            0.132352941, 0.134803922, 0.134803922, 0.137254902
        ])

        # Realizando a regressão polinomial de 6ª ordem
        coefficients_new = np.polyfit(x, y, 6)
        polynomial_new = np.poly1d(coefficients_new)

        # Testando um valor específico
        y_pred = polynomial_new(x_test)        
              
    elif (x_test >= 0.00001) and (x_test <= 0.000099999999999):

       # Novos dados fornecidos
        x = np.array([
            0.000010000000000, 0.000010118323416, 0.000010574641306, 0.000010890229623,
            0.000011215236318, 0.000011721022975, 0.000012249619686, 0.000012802055142,
            0.000013184118127, 0.000013778697755, 0.000014189907544, 0.000014829846436,
            0.000015498645401, 0.000015961185100, 0.000016437528778, 0.000016928088399,
            0.000017433288222, 0.000018219497653, 0.000018763238138, 0.000019609425879,
            0.000020493775141, 0.000021105388888, 0.000021735255561, 0.000022715475856,
            0.000023739902294, 0.000024810528492, 0.000025929437974, 0.000027098808229,
            0.000027907541784, 0.000029166120904, 0.000030036551089, 0.000031391144638,
            0.000032806827879, 0.000034286355847, 0.000035832607821, 0.000037448592933,
            0.000038566204212, 0.000040305469524, 0.000042123172523, 0.000043380291389,
            0.000044674927559, 0.000046008200694, 0.000047381263871, 0.000048795304580,
            0.000050251545748, 0.000051751246802, 0.000052517798603, 0.000054085133433,
            0.000055699243614, 0.000057361525104, 0.000059073415522, 0.000060836395391,
            0.000062651989417, 0.000064521767812, 0.000066447347648, 0.000068430394255,
            0.000070472622665, 0.000072575799092, 0.000074741742463, 0.000075848834966,
            0.000078112458423, 0.000080443637185, 0.000082844387364, 0.000086580517798,
            0.000087862969062, 0.000090485140885, 0.000093185568486, 0.000095966587322,
            0.000099999999999
        ])

        y = np.array([
            0.139705882, 0.142156863, 0.144607843, 0.147058824, 0.149509804,
            0.151960784, 0.154411765, 0.156862745, 0.159313725, 0.161764706,
            0.164215686, 0.166666667, 0.169117647, 0.169117647, 0.171568627,
            0.174019608, 0.174019608, 0.174019608, 0.176470588, 0.178921569,
            0.178921569, 0.181372549, 0.181372549, 0.183823529, 0.18627451,
            0.18872549, 0.191176471, 0.193627451, 0.196078431, 0.198529412,
            0.200980392, 0.203431373, 0.208333333, 0.210784314, 0.215686275,
            0.218137255, 0.223039216, 0.227941176, 0.230392157, 0.232843137,
            0.235294118, 0.237745098, 0.240196078, 0.245098039, 0.24754902,
            0.25, 0.25245098, 0.254901961, 0.259803922, 0.262254902,
            0.264705882, 0.269607843, 0.272058824, 0.274509804, 0.279411765,
            0.281862745, 0.286764706, 0.289215686, 0.294117647, 0.296568627,
            0.299019608, 0.303921569, 0.308823529, 0.31372549, 0.316176471,
            0.318627451, 0.323529412, 0.328431373, 0.330882353
        ])

        # Realizando a regressão polinomial de 6ª ordem
        coefficients_new = np.polyfit(x, y, 6)
        polynomial_new = np.poly1d(coefficients_new)

        # Testando um valor específico 
        y_pred = polynomial_new(x_test)
       
    elif (x_test >= 0.0001) and (x_test <= 0.000999999999999):

        x = np.array([

            0.000100000000000, 0.000104817603827, 0.000107945767719, 0.000111167288155,
            0.000114484951258, 0.000117901626298, 0.000121420268174, 0.000125043919973,
            0.000128775715598, 0.000132618882480, 0.000136576744369, 0.000140652724211,
            0.000144850347101, 0.000149173243342, 0.000153625151575, 0.000158209922019,
            0.000160553365090, 0.000165344900300, 0.000170279433508, 0.000175361232328,
            0.000180594691737, 0.000185984337876, 0.000191534831962, 0.000197250974323,
            0.000203137708545, 0.000206146632697, 0.000212298847872, 0.000218634669012,
            0.000225159575632, 0.000231879210777, 0.000235313860910, 0.000242336539316,
            0.000249568801687, 0.000253265474256, 0.000260823898440, 0.000268607895321,
            0.000276624196863, 0.000284879735939, 0.000293381652325, 0.000302137298875,
            0.000311154247882, 0.000320440297625, 0.000330003479113, 0.000334891569294,
            0.000344886032786, 0.000355178769838, 0.000365778682089, 0.000371196683103,
            0.000382274632021, 0.000393683189907, 0.000405432223414, 0.000417531893656,
            0.000429992664994, 0.000442825314084, 0.000456040939202, 0.000469650969838,
            0.000483667176582, 0.000498101681304, 0.000512966967640, 0.000528275891784,
            0.000544041693608, 0.000560278008116, 0.000576998877229, 0.000594218761939,
            0.000611952554805, 0.000630215592840, 0.000649023670774, 0.000678293451934,
            0.000698536359680, 0.000719383394317, 0.000740852585334, 0.000762962500292,
            0.000774263682681, 0.000797370714387, 0.000821167349553, 0.000845674168620,
            0.000870912366232, 0.000896903769561, 0.000923670857187, 0.000965326724409,
            0.000999999999999
        ])

        y = np.array([
            0.335784314, 0.340686275, 0.345588235, 0.350490196, 0.355392157,
            0.360294118, 0.365196078, 0.370098039, 0.375, 0.379901961,
            0.384803922, 0.389705882, 0.394607843, 0.399509804, 0.404411765,
            0.409313725, 0.416666667, 0.421568627, 0.426470588, 0.431372549,
            0.43627451, 0.441176471, 0.448529412, 0.453431373, 0.460784314,
            0.468137255, 0.473039216, 0.480392157, 0.485294118, 0.490196078,
            0.49754902, 0.50245098, 0.507352941, 0.514705882, 0.519607843,
            0.526960784, 0.534313725, 0.541666667, 0.549019608, 0.556372549,
            0.56372549, 0.571078431, 0.575980392, 0.583333333, 0.588235294,
            0.593137255, 0.600490196, 0.607843137, 0.612745098, 0.620098039,
            0.62745098, 0.634803922,  0.642156863, 0.649509804,
            0.656862745, 0.664215686, 0.671568627, 0.678921569, 0.68627451,
            0.693627451, 0.700980392, 0.708333333, 0.715686275, 0.723039216,
            0.730392157, 0.737745098, 0.745098039, 0.75245098, 0.759803922,
            0.767156863, 0.772058824, 0.776960784, 0.784313725, 0.789215686,
            0.794117647, 0.801470588, 0.808823529, 0.81372549, 0.821078431,
            0.825980392, 0.833333333
        ])

        # Realizando a regressão polinomial de 6ª ordem
        coefficients_new = np.polyfit(x, y, 6)
        polynomial_new = np.poly1d(coefficients_new)

  
        y_pred = polynomial_new(x_test)

  
    elif (x_test >= 0.001) and (x_test <= 0.00472421334321816):

        x = np.array([
            0.001000000000000, 0.001054358990835, 0.001101908653991, 0.001134793882595,
            0.001168660533984, 0.001221364987798, 0.001257815256781, 0.001295353343183,
            0.001353771411101, 0.001394173201368, 0.001435780737777, 0.001478630004471,
            0.001522758059498, 0.001591431664434, 0.001638926158558, 0.001712838732411,
            0.001790084628236, 0.001870814172759, 0.001955184472169, 0.002043359717857,
            0.002135511505944, 0.002231819171224, 0.002298425312652, 0.002367019239710,
            0.002473767480594, 0.002585329872011, 0.002701923523349, 0.002823775335233,
            0.002951122441092, 0.003084212668640, 0.003223305022166, 0.003368670186580,
            0.003520591054186, 0.003679363275216, 0.003789169747817, 0.003960054376977,
            0.004138645590542, 0.004325290941380, 0.004520353656360, 0.004724213343218
        ])

        y = np.array([
            0.838235294, 0.845588235, 0.852941176, 0.860294118, 0.865196078, 0.87254902,
            0.87745098, 0.882352941, 0.887254902, 0.892156863, 0.897058824, 0.901960784,
            0.906862745, 0.911764706, 0.916666667, 0.921568627, 0.926470588, 0.931372549,
            0.93627451, 0.941176471, 0.946078431, 0.950980392, 0.953431373, 0.955882353,
            0.960784314, 0.963235294, 0.968137255, 0.970588235, 0.970588235, 0.975490196,
            0.977941176, 0.982843137, 0.982843137, 0.987745098, 0.987745098, 0.990196078,
            0.990196078, 0.992647059, 0.995098039, 0.99754902
        ])

        # Realizando a regressão polinomial de 6ª ordem
        coefficients = np.polyfit(x, y, 6)
        polynomial = np.poly1d(coefficients)
        y_pred = polynomial(x_test)

    elif x_test > 0.00472421334321816:
        y_pred = 1


    hl = y_pred*psi(Flow_info, tubing)

    if hl > 1:
        hl = 1
    elif hl < 0:
        hl = 0 

    return hl

def slip_viscosity_Hb( Flow_info, tubing) -> float:
    Hl = HL_HB(Flow_info,tubing)
    return  ( (Flow_info.liquid_viscosity**Hl) * ( (Flow_info.gas_viscosity)**(1-Hl) ) )

def reynolds_HB(Flow_info, tubing) -> float:

    a = slip_viscosity_Hb(Flow_info,tubing)
    
    reynolds = (Flow_info.mix_rho*Flow_info.vm*tubing.Dh) / (slip_viscosity_Hb(Flow_info,tubing)) 
    
    return  reynolds

def FD_HB(Flow_info, tubing) -> float:
    re = reynolds_HB(Flow_info,tubing)
    def f(F):
        return ((- 2*np.log10( ( (tubing.e/tubing.Dh) / (3.7) ) + ( 2.51 / ( re*np.sqrt(F) ) ))) - ( 1 / np.sqrt(F) )) 

    F = fsolve(f,0.001)[0]

    return F

def mix_slip_density_HB( Flow_info,  tubing) -> float:
    Hl = HL_HB(Flow_info,tubing)
    return ( ( Flow_info.liquid_rho * Hl ) + Flow_info.gas_rho*( 1 - Hl) )

def friction_gradient_HB( Flow_info, tubing) -> float:
    return ( FD_HB( Flow_info , tubing  ) * ( ( Flow_info.mix_rho**2 * Flow_info.vm**2 ) / (2*tubing.Dh*mix_slip_density_HB(Flow_info, tubing)) ) )

def gravitational_gradient_HB( Flow_info, tubing) -> float:
    if tubing.direction == "Descendente":
        angle = tubing.angle*-1
    else:
        angle = tubing.angle
    grav = mix_slip_density_HB(Flow_info, tubing) * g * np.sin(angle)
    return grav
